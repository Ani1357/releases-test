name: Create Release Candidate.
run-name: Create Release Candidate from commit ${{ github.event.inputs.rc_commit_sha }}

on:
  workflow_dispatch:
    inputs:
      rc_commit_sha:
        description: 'Commit from which to create the release candidate. If not provided, the latest commit on main will be used'
        required: false
        type: string
      dry_run:
        description: 'If you want to run the workflow without making any changes'
        required: true
        default: 'true'
        type: choice
        options:
        - true
        - false

jobs:
  create_patch_release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install standard-version
      run: |
        npm install standard-version  

    - name: Determine commit from where to create the RC
      id: determine_commit
      run: |
        if [ "${{ github.event.inputs.rc_commit_sha }}" == "" ]; then
          echo "No commit sha provided, using the latest commit"
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_ENV
        else
          echo "Using provided commit sha"
          echo "commit_sha=${{ github.event.inputs.rc_commit_sha }}" >> $GITHUB_ENV
        fi

    - name: Create release candidate tag
      id: create_release
      run: |

        git config --global user.email "rc_githubactions@github.com"
        git config --global user.name "Release Candidate GitHub Action "
        
        git reset --hard ${{ env.commit_sha }}
        
        # Use standard-version to determine the next version
        npm run release -- --skip.commit --skip.tag --skip.changelog
        new_version=$(jq -r '.version' package.json)
        branch_name=rc/v${new_version%.*}
        
        git reset --hard ${{ env.commit_sha }}

        if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
          echo "Dry run enabled. The following commands would be executed:"
          echo "git checkout -b $branch_name"
          echo "npm run release -- --prerelease rc --skip.changelog --dry-run"
          npm run release -- --prerelease rc --skip.changelog --dry-run
          echo "git push -u origin $branch_name --follow-tags"
        else
          git checkout -b $branch_name
          npm run release -- --prerelease rc --skip.changelog
          git push -u origin $branch_name --follow-tags
        fi
    - name: Create Github Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tag=$(jq -r '.version' package.json)
        if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
          echo "Dry run enabled. The following commands would be executed:"
          echo "gh release create "$tag" --title="Release: $tag" --notes="Automated release for $tag" --latest=false -p"
        else
          gh release create "$tag" --title="Release: $tag" --notes="Automated release for $tag" --latest=false -p
        fi