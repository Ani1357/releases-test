name: Build and publish Docker
on:
  push:
    branches:
      - 'special-branch'
    # tags:
    #   - 'v*'
    #   - 'v*-rc*'
env:
  CACHE_REGISTRY: ghcr.io
  CACHE_REPO: ani509/my-webapp
  REPO: ani509/my-webapp
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_LINODEBOT_TOKEN }}
  DOCKER_USERNAME: ${{ vars.DOCKERHUB_LINODEBOT_USERNAME }}
  BOT_EMAIL: ${{ vars.BOT_EMAIL }}
  BOT_USERNAME: ${{ vars.BOT_USERNAME }}
  COMMIT_SHA: ${{ github.sha }}

jobs:
  build-test-cache:
    if: (!contains(github.event.head_commit.message, 'ci skip') && !github.event.act)
    runs-on: ubuntu-22.04
    steps:
      - name: Set env
        run: |
          tag=${GITHUB_REF##*/}
          echo "Creating tag: $tag"
          echo "TAG=$tag" >> $GITHUB_ENV
          git config --global user.email $BOT_EMAIL
          git config --global user.name $BOT_USERNAME

      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CACHE_REGISTRY }}
          username: ${{ env.BOT_USERNAME }}
          password: '${{ secrets.BOT_TOKEN }}'
      - name: CI tests, image build and push tag for branch or tag
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          tags: |
            ${{ env.CACHE_REGISTRY }}/${{ env.CACHE_REPO }}:${{ env.TAG }}

  push-to-docker:
    needs: build-test-cache
    if: always() && github.event_name == 'push' && !github.event.act && github.actor != 'dependabot[bot]'
    runs-on: ubuntu-22.04
    steps:
      - name: Push to docker hub
        run: |
          set -u
          TAG=${GITHUB_REF##*/}
          docker login ghcr.io -u $BOT_USERNAME -p ${{ secrets.BOT_TOKEN }}
          image="$CACHE_REGISTRY/$CACHE_REPO:$TAG"
          docker pull $image
          docker tag $image $REPO:$TAG
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push $REPO:$TAG

  release:
    needs: push-to-docker
    if: startsWith(github.ref, 'refs/tags/v') && !github.event.act
    runs-on: ubuntu-22.04
    env:
      COMMIT_MSG: ${{ github.event.head_commit.message }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set env
        run: |
          git config --global user.email $BOT_EMAIL
          git config --global user.name $BOT_USERNAME
      - name: Promote Docker tags and push Git tag
        id: git_tag
        run: |
          TAG=${GITHUB_REF##*/}
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker pull $REPO:$TAG
          # Only promote to :latest if it's NOT an RC tag
          if [[ "$TAG" != *"-rc"* ]]; then
            docker tag $REPO:$TAG $REPO:latest
            docker push $REPO:latest
          fi
          docker login -u $BOT_USERNAME -p '${{ secrets.BOT_TOKEN }}' ghcr.io
          docker tag $REPO:$TAG $CACHE_REGISTRY/$CACHE_REPO:$TAG
          docker push $CACHE_REGISTRY/$CACHE_REPO:$TAG
      - name: Extract final changelog section
        run: |
          sed -n '/### \[[0-9]*/q;p' CHANGELOG.md > NEW_CHANGELOG.md
      - name: Create GitHub release
        if: (!contains(github.ref, '-rc'))
        uses: ncipollo/release-action@v1.16.0
        env:
          token: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          bodyFile: 'NEW_CHANGELOG.md'
          generateReleaseNotes: true

  chart-release:
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    container:
      image: linode/apl-tools:v2.8.2
      options: --user 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare chart
        id: prepare_chart
        run: |
          helm repo add apl https://linode.github.io/apl-core
          helm repo update
          TAG=${GITHUB_REF##*/}
          # Use the full tag (including -rc suffix) as app_version
          sed -i "s/0.0.0-chart-version/$TAG/g" chart/apl/Chart.yaml
          sed -i "s/APP_VERSION_PLACEHOLDER/$TAG/g" chart/apl/Chart.yaml
          # Add -rc suffix to chart version if present in tag
          if [[ "$TAG" == *"-rc"* ]]; then
            chart_version=$(echo "$TAG" | sed 's/^v//')
            sed -i "s/version: .*/version: $chart_version/" chart/apl/Chart.yaml
          fi
          cp README.md chart/apl/
          printf "\n\n" >>chart/apl/README.md
          cat tpl/chart-values.md >>chart/apl/README.md
          npx js-yaml values-schema.yaml > chart/apl/values.schema.json
          git config --global user.email ${{ env.BOT_EMAIL }}
          git config --global user.name ${{ env.BOT_USERNAME }}
      - name: Mark repo as safe
        run: git config --global --add safe.directory /__w/apl-core/apl-core
      - name: Create and publish otomi chart release
        id: chart_release
        uses: helm/chart-releaser-action@v1.7.0
        with:
          charts_dir: chart
          skip_existing: true
          mark_as_latest: false
        env:
          CR_TOKEN: '${{ secrets.GITHUB_TOKEN }}'