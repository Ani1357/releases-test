name: Create Release Candidate

on:
  workflow_dispatch:
    inputs:
      create_or_patch:
        description: 'Do you want to create a new release or a patch an existing one?'
        required: true
        default: 'create'
        type: choice
        options:
        - create
        - patch
      rc_commit_sha:
        description: 'If create was selected, provide commit from which to create the release candidate'
        required: false
        type: string
      patch_commit_shas:
        description: 'If patch was selected provide comma separated list of commits to be included in the patch'
        required: false
        type: string
      dry_run:
        description: 'If you want to run the workflow without making any changes'
        required: true
        default: 'true'
        type: choice
        options:
        - true
        - false

jobs:
  create_release:
    if: ${{ github.event.inputs.create_or_patch == 'create' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Determine commit from where to create the RC
      id: determine_commit
      run: |
        if [ "${{ github.event.inputs.rc_commit_sha }}" == "" ]; then
          echo "No commit sha provided, using the latest commit"
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_ENV
        else
          echo "Using provided commit sha"
          echo "commit_sha=${{ github.event.inputs.rc_commit_sha }}" >> $GITHUB_ENV
        fi
    - name: Create release candidate
      id: create_release
      run: |
        git reset --hard ${{ env.commit_sha }}
        
        latest_release_tag=$(git tag | sort -u | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | tail -n 1)
        echo "Latest release tag is $latest_release_tag"
        echo 'new_rc_tag=${latest_release_tag%.*}-rc1' >> $GITHUB_ENV
        echo "New RC tag is $new_rc_tag"
        echo 'branch_name=rc/$(echo "${new_rc_tag%-*}"| cut -d. -f1-2)' >> $GITHUB_ENV'
        echo "New branch name is $branch_name"

    - name: Install release-please
      run: |
        npm install -g release-please
        echo "Release-please installed"
    - name: Create release candidate
      id: create_release_candidate
      run: |
        echo "Creating release candidate"
        if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
          echo "Running in dry run mode"
          release-please github-release \
            --token=${{ secrets.GITHUB_TOKEN }} \
            --prerelease=true \
            --repo_url=${{ github.repository }} --dry-run

        else
          echo "Running in dry run mode"
          release-please github-release \
            --token=${{ secrets.GITHUB_TOKEN }} \
            --prerelease=true \
            --repo_url=${{ github.repository }}
        fi