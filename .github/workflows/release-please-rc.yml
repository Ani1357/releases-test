name: Create Release Candidate

on:
  workflow_dispatch:
    inputs:
      create_or_patch:
        description: 'Do you want to create a new release or a patch an existing one?'
        required: true
        default: 'create'
        type: choice
        options:
        - create
        - patch
      rc_commit_sha:
        description: 'If create was selected, provide commit from which to create the release candidate'
        required: false
        type: string
      patch_commit_shas:
        description: 'If patch was selected provide comma separated list of commits to be included in the patch'
        required: false
        type: string
      dry_run:
        description: 'If you want to run the workflow without making any changes'
        required: true
        default: 'true'
        type: choice
        options:
        - true
        - false

jobs:
  create_patch_release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install standard-version
      run: |
        npm install standard-version  

    - name: Determine commit from where to create the RC
      if: ${{ github.event.inputs.create_or_patch == 'create' }}
      id: determine_commit
      run: |
        if [ "${{ github.event.inputs.rc_commit_sha }}" == "" ]; then
          echo "No commit sha provided, using the latest commit"
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_ENV
        else
          echo "Using provided commit sha"
          echo "commit_sha=${{ github.event.inputs.rc_commit_sha }}" >> $GITHUB_ENV
        fi

    - name: Create release candidate branch
      if: ${{ github.event.inputs.create_or_patch == 'create' }}
      id: create_release
      run: |

        git config --global user.email "githubactions_rc@github.com"
        git config --global user.name "GitHub Action RC"
        
        git reset --hard ${{ env.commit_sha }}
        
        latest_release_tag=$(git tag | sort -u | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | tail -n 1)
        branch_name=rc/$(echo "$latest_release_tag" | awk -F'[.]' '{print $1 "." ($2 + 1)}')

        

        if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
          echo "Dry run enabled. The following commands would be executed:"x
          echo "git checkout -b $branch_name"
          echo "npm run release -- --prerelease rc --dry-run"
          echo "git push -u origin $branch_name --follow-tags"
        else
          git checkout -b $branch_name
          npm run release -- --prerelease rc
          git push -u origin $branch_name --follow-tags
        fi

    - name: Patch release candidate
      if: ${{ github.event.inputs.create_or_patch == 'patch' }}
      id: patch_rc
      run: |
        git status
        commit_shas="${{ github.event.inputs.patch_commit_shas }}"
        IFS=',' read -r -a commit_array <<< "$commit_shas"
        for commit_sha in "${commit_array[@]}"; do
          echo "Patching with commit: $commit_sha"
          git cherry-pick -x $commit_sha
        done