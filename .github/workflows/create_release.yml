name: Create Release Candidate. Run it from the release candidate branch you want to promote to release.

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'If you want to run the workflow without making any changes'
        required: true
        default: 'true'
        type: choice
        options:
        - true
        - false

jobs:
  create_patch_release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install dependencies
      run: |
        npm install standard-version  

    - name: Create release/maintenance branch
      id: get_latest_rc_tag
      run: |
        git config --global user.email "release_githubactions@github.com"
        git config --global user.name "Release GitHub Action"

        dry=${{ github.event.inputs.dry_run }}
        if [ "$dry" == "true" ]; then
          dry="echo"
          echo "# Note: This script is executed in dry-run mode and will not perform the git-push"
        else
          dry=""
        fi

        rc_branch=$(git rev-parse --abbrev-ref HEAD)
        latest_rc_tag=$(git describe --tags --abbrev=0)
        branch_name=${rc_branch//rc/release}
        release_version=${branch_name/release\//}
        echo "release_version=$release_version" >> $GITHUB_ENV

        git checkout -b $branch_name
        $dry git push -u origin $branch_name 
        

    - name: Create release candidate branch
      id: create_release
      run: |
        # Workaround: removing rc tags to force standard-version to include 
        # all the changelog between the last release and the new one
        for i in $(git tag | grep "${{ env.commit_sha }}.0-rc."); do git tag -d $i;done

        if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
          npm run release -- --dry-run
        else
          npm run release
          git push --follow-tags
        fi
